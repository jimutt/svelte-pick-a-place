{
  "version": 3,
  "file": "pick-a-place.css",
  "sources": [
    "..\\src\\components\\PickAPlace.svelte",
    "..\\src\\components\\LeafletPositionPicker.svelte",
    "..\\src\\components\\drawing\\DrawingToolbar.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import { onMount, setContext } from 'svelte';\r\n  import { LEAFLET_CTX } from '../constants';\r\n  import LeafletPositionPicker from './LeafletPositionPicker.svelte';\r\n\r\n  export let leaflet;\r\n  export let lat = 45;\r\n  export let lng = 0;\r\n  export let zoom = 3;\r\n  export let guideOverlay = true;\r\n  export let buttons = true;\r\n\r\n  setContext(LEAFLET_CTX, {\r\n    getMap: () => map,\r\n    getLeaflet: () => leaflet\r\n  });\r\n\r\n  let mapElement;\r\n  let map;\r\n\r\n  onMount(() => {\r\n    if (leaflet == null) {\r\n      throw new Error('No Leaflet instance was provided.');\r\n    }\r\n\r\n    map = leaflet.map(mapElement).setView([lat, lng], zoom);\r\n    leaflet\r\n      .tileLayer('https://a.tile.openstreetmap.org/{z}/{x}/{y}.png ', {\r\n        attribution:\r\n          'Map data &copy; <a href=\"https://www.openstreetmap.org/\">OpenStreetMap</a> contributors, <a href=\"https://creativecommons.org/licenses/by-sa/2.0/\">CC-BY-SA</a>',\r\n        maxZoom: 18\r\n      })\r\n      .addTo(map);\r\n  });\r\n</script>\r\n\r\n<style>\r\n  .pick-a-place {\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n\r\n  :global(.pick-a-place__overlay-container) {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    height: 100%;\r\n    z-index: 401;\r\n    pointer-events: none;\r\n  }\r\n\r\n  :global(.pick-a-place__overlay-content) {\r\n    position: relative;\r\n    width: 100%;\r\n    height: 100%;\r\n  }\r\n</style>\r\n\r\n<div class=\"pick-a-place\" bind:this={mapElement}>\r\n\r\n  <div class=\"pick-a-place__overlay-container\">\r\n    <div class=\"pick-a-place__overlay-content\">\r\n      <slot />\r\n      {#if map}\r\n        <LeafletPositionPicker {guideOverlay} {buttons} on:update on:save on:cancel />\r\n      {/if}\r\n    </div>\r\n  </div>\r\n\r\n</div>\r\n",
    "<script>\r\n  import { LEAFLET_CTX } from '../constants';\r\n  import { getContext, tick } from 'svelte';\r\n  import { createEventDispatcher } from 'svelte';\r\n  import DrawingToolbar from './drawing/DrawingToolbar.svelte';\r\n  import PointPicker from './PointPicker.svelte';\r\n  import PolygonPicker from './PolygonPicker.svelte';\r\n\r\n  const dispatch = createEventDispatcher();\r\n\r\n  export let placeMarker = true;\r\n  export let guideOverlay = true;\r\n  export let buttons = true;\r\n  export let selectionMode = 'point';\r\n\r\n  let position = null;\r\n  let selectionComplete = false;\r\n\r\n  const setPosition = (pos, selectionCompleted = false) => {\r\n    position = pos;\r\n    selectionComplete = selectionCompleted;\r\n    dispatch('update', position);\r\n  };\r\n\r\n  $: polygonInstructionText = computePolygonText(position);\r\n\r\n  const computePolygonText = position => {\r\n    if (position == null || !position.length) return 'Select polygon start position';\r\n    else if (selectionComplete) return 'Selection completed';\r\n    else if (position.length <= 2) return 'Select the next point of the polygon';\r\n    else if (position.length > 2)\r\n      return 'Add additional points or click the start position to finish editing.';\r\n  };\r\n\r\n  const completePolygon = polygon => {\r\n    setPosition(polygon, true);\r\n  };\r\n\r\n  const handleSetMode = ({ detail }) => {\r\n    selectionComplete = false;\r\n    selectionMode = detail;\r\n  };\r\n\r\n  const resetSelection = async ({ detail }) => {\r\n    selectionComplete = false;\r\n    position = null;\r\n\r\n    const currentMode = selectionMode;\r\n    selectionMode = -1;\r\n    await tick();\r\n    selectionMode = currentMode;\r\n  };\r\n</script>\r\n\r\n<style>\r\n  /* Global styles for easy override */\r\n  :global(.pick-a-place__guide-panel) {\r\n    position: absolute;\r\n    left: 0;\r\n    top: 0;\r\n    width: 100%;\r\n    padding: 2rem 0;\r\n    text-align: center;\r\n    background-color: rgba(0, 0, 0, 0.6);\r\n    font-size: 1.5rem;\r\n    color: white;\r\n  }\r\n\r\n  :global(.pick-a-place__button-panel) {\r\n    position: absolute;\r\n    width: 100%;\r\n    left: 0;\r\n    bottom: 0;\r\n    padding: 2rem 0;\r\n    text-align: center;\r\n    z-index: 401;\r\n    pointer-events: all;\r\n  }\r\n\r\n  :global(.pick-a-place__button-panel button) {\r\n    font-size: 1.25rem;\r\n    cursor: pointer;\r\n    margin: 0 0.5rem;\r\n  }\r\n</style>\r\n\r\n<DrawingToolbar :mode={selectionMode} on:setMode={handleSetMode} />\r\n\r\n{#if selectionMode === 'point'}\r\n  <PointPicker on:update={({ detail }) => setPosition(detail, true)} />\r\n{:else if selectionMode === 'polygon'}\r\n  <PolygonPicker\r\n    on:update={({ detail }) => setPosition(detail)}\r\n    on:complete={({ detail }) => completePolygon(detail)} />\r\n{/if}\r\n\r\n{#if guideOverlay}\r\n  <div class=\"pick-a-place__guide-panel\" data-testid=\"guide-overlay\">\r\n    {#if selectionMode === 'point'}\r\n      {#if position != null && position.lat != null}\r\n        <span>Latitude: {position.lat.toFixed(5)} Longitude: {position.lng.toFixed(5)}</span>\r\n      {:else}\r\n        <span>Click the map to select a position</span>\r\n      {/if}\r\n    {:else if selectionMode === 'polygon'}\r\n      <span>{polygonInstructionText}</span>\r\n    {/if}\r\n  </div>\r\n{/if}\r\n\r\n{#if buttons}\r\n  <div class=\"pick-a-place__button-panel\" data-testid=\"button-overlay\">\r\n    <button type=\"button\" on:click|stopPropagation={() => dispatch('cancel')}>Cancel</button>\r\n    {#if selectionMode === 'polygon' && selectionComplete}\r\n      <button type=\"button\" on:click|stopPropagation={resetSelection}>Reset selection</button>\r\n    {/if}\r\n    <button\r\n      type=\"button\"\r\n      disabled={!selectionComplete}\r\n      on:click|stopPropagation={() => dispatch('save', position)}>\r\n      Use selection\r\n    </button>\r\n  </div>\r\n{/if}\r\n",
    "<script>\r\n  import { getContext, createEventDispatcher } from 'svelte';\r\n  import { LEAFLET_CTX } from '../../constants';\r\n\r\n  const dispatch = createEventDispatcher();\r\n  const { getMap, getLeaflet } = getContext(LEAFLET_CTX);\r\n\r\n  export let mode = 'point';\r\n\r\n  const setMode = newMode => {\r\n    mode = newMode;\r\n    dispatch('setMode', mode);\r\n  };\r\n</script>\r\n\r\n<style>\r\n  :global(.pick-a-place__drawing-toolbar-wrapper) {\r\n    position: absolute;\r\n    left: 10px;\r\n    top: 120px;\r\n    width: auto;\r\n    height: auto;\r\n    z-index: 401;\r\n    pointer-events: all;\r\n  }\r\n\r\n  :global(.pick-a-place__drawing-toolbar) {\r\n    background-color: #fff;\r\n    border-radius: 2px;\r\n    border: 2px solid rgba(0, 0, 0, 0.2);\r\n    padding: 5px;\r\n  }\r\n\r\n  :global(.pick-a-place__drawing-toolbar h4) {\r\n    text-align: center;\r\n    margin: 0 0 5px 0;\r\n  }\r\n\r\n  :global(.pick-a-place__drawing-button) {\r\n    display: block;\r\n    width: 100%;\r\n    font-family: inherit;\r\n    overflow: visible;\r\n    text-transform: none;\r\n    margin-bottom: 5px;\r\n    padding: 5px;\r\n    background-color: #fff;\r\n    border-radius: 2px;\r\n    border: 2px solid rgba(0, 0, 0, 0.2);\r\n    padding: 5px;\r\n  }\r\n\r\n  :global(.pick-a-place__drawing-button.active) {\r\n    font-weight: bold;\r\n  }\r\n\r\n  :global(.pick-a-place__drawing-button:hover) {\r\n    cursor: pointer;\r\n  }\r\n</style>\r\n\r\n<div class=\"pick-a-place__drawing-toolbar-wrapper\">\r\n  <div class=\"pick-a-place__drawing-toolbar\">\r\n    <h4>Mode</h4>\r\n    <button\r\n      data-testid=\"point-mode-btn\"\r\n      class=\"pick-a-place__drawing-button\"\r\n      class:active={mode === 'point'}\r\n      on:click|stopPropagation={() => setMode('point')}>\r\n      Point\r\n    </button>\r\n    <button\r\n      data-testid=\"polygon-mode-btn\"\r\n      class=\"pick-a-place__drawing-button\"\r\n      class:active={mode === 'polygon'}\r\n      on:click|stopPropagation={() => setMode('polygon')}>\r\n      Polygon\r\n    </button>\r\n  </div>\r\n</div>\r\n"
  ],
  "names": [],
  "mappings": "AAqCE,aAAa,cAAC,CAAC,AACb,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC,AAEO,gCAAgC,AAAE,CAAC,AACzC,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,GAAG,CACZ,cAAc,CAAE,IAAI,AACtB,CAAC,AAEO,8BAA8B,AAAE,CAAC,AACvC,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,AACd,CAAC;ACAO,0BAA0B,AAAE,CAAC,AACnC,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,CAAC,CACP,GAAG,CAAE,CAAC,CACN,KAAK,CAAE,IAAI,CACX,OAAO,CAAE,IAAI,CAAC,CAAC,CACf,UAAU,CAAE,MAAM,CAClB,gBAAgB,CAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,SAAS,CAAE,MAAM,CACjB,KAAK,CAAE,KAAK,AACd,CAAC,AAEO,2BAA2B,AAAE,CAAC,AACpC,QAAQ,CAAE,QAAQ,CAClB,KAAK,CAAE,IAAI,CACX,IAAI,CAAE,CAAC,CACP,MAAM,CAAE,CAAC,CACT,OAAO,CAAE,IAAI,CAAC,CAAC,CACf,UAAU,CAAE,MAAM,CAClB,OAAO,CAAE,GAAG,CACZ,cAAc,CAAE,GAAG,AACrB,CAAC,AAEO,kCAAkC,AAAE,CAAC,AAC3C,SAAS,CAAE,OAAO,CAClB,MAAM,CAAE,OAAO,CACf,MAAM,CAAE,CAAC,CAAC,MAAM,AAClB,CAAC;ACnEO,sCAAsC,AAAE,CAAC,AAC/C,QAAQ,CAAE,QAAQ,CAClB,IAAI,CAAE,IAAI,CACV,GAAG,CAAE,KAAK,CACV,KAAK,CAAE,IAAI,CACX,MAAM,CAAE,IAAI,CACZ,OAAO,CAAE,GAAG,CACZ,cAAc,CAAE,GAAG,AACrB,CAAC,AAEO,8BAA8B,AAAE,CAAC,AACvC,gBAAgB,CAAE,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,OAAO,CAAE,GAAG,AACd,CAAC,AAEO,iCAAiC,AAAE,CAAC,AAC1C,UAAU,CAAE,MAAM,CAClB,MAAM,CAAE,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,AACnB,CAAC,AAEO,6BAA6B,AAAE,CAAC,AACtC,OAAO,CAAE,KAAK,CACd,KAAK,CAAE,IAAI,CACX,WAAW,CAAE,OAAO,CACpB,QAAQ,CAAE,OAAO,CACjB,cAAc,CAAE,IAAI,CACpB,aAAa,CAAE,GAAG,CAClB,OAAO,CAAE,GAAG,CACZ,gBAAgB,CAAE,IAAI,CACtB,aAAa,CAAE,GAAG,CAClB,MAAM,CAAE,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CACpC,OAAO,CAAE,GAAG,AACd,CAAC,AAEO,oCAAoC,AAAE,CAAC,AAC7C,WAAW,CAAE,IAAI,AACnB,CAAC,AAEO,mCAAmC,AAAE,CAAC,AAC5C,MAAM,CAAE,OAAO,AACjB,CAAC"
}